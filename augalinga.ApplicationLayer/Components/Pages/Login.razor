@page "/login"
@using augalinga.Backend.Services
@using augalinga.Backend.ViewModels
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject IAuthService AuthService

<div class="container">
    <h1>User Login</h1>
    <EditForm Model="loginViewModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="email">Email:</label>
            <InputText id="username" class="form-control" @bind-Value="loginViewModel.Email" />
            <ValidationMessage For="@(() => loginViewModel.Email)" />
        </div>
        <div class="form-group">
            <label for="password">Password:</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="loginViewModel.Password" />
            <ValidationMessage For="@(() => loginViewModel.Password)" />
        </div>

        <button type="submit" class="btn btn-primary">Login</button>
    </EditForm>

    <div class="mt-3">
        <button class="btn btn-link" @onclick="NavigateToRegister">Don't have an account? Register here.</button>
    </div>
</div>

@code {
    private UserLoginViewModel loginViewModel = new UserLoginViewModel();

    protected override async Task OnInitializedAsync()
    {
        await AuthService.InitializeAsync();
        if (AuthService.IsUserLoggedIn())
        {
            Navigation.NavigateTo("/");
        }
    }

    private async Task HandleLogin()
    {
        var loginSuccessful = await AuthService.Login(loginViewModel.Email, loginViewModel.Password);
        if (loginSuccessful)
        {
            Navigation.NavigateTo("/");
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Invalid email or password.");
        }
    }

    private void NavigateToRegister()
    {
        Navigation.NavigateTo("/register");
    }
}
