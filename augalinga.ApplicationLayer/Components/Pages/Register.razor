@page "/register"
@using Microsoft.EntityFrameworkCore
@using augalinga.Backend.ViewModels
@using augalinga.Data.Access
@using augalinga.Data.Entities
@using augalinga.Data.Enums
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject NotificationsViewModel NotificationsViewModel

<div class="container">
    <h1>User Registration</h1>
    <EditForm Model="registerViewModel" OnValidSubmit="HandleRegister">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="username">Full Name:</label>
            <InputText id="username" class="form-control" @bind-Value="registerViewModel.FullName" />
            <ValidationMessage For="@(() => registerViewModel.FullName)" />
        </div>

        <div class="form-group">
            <label for="email">Email:</label>
            <InputText id="email" type="email" class="form-control" @bind-Value="registerViewModel.Email" />
            <ValidationMessage For="@(() => registerViewModel.Email)" />
        </div>

        <div class="form-group">
            <label for="password">Password:</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="registerViewModel.Password" />
            <ValidationMessage For="@(() => registerViewModel.Password)" />
        </div>

        <div class="form-group">
            <label for="background">Pick a Color:</label>
            <InputText id="background" type="color" class="form-control" @bind-Value="registerViewModel.Background" />
        </div>

        <button type="submit" class="btn btn-primary">Register</button>
    </EditForm>

    <div class="mt-3">
        <button class="btn btn-link" @onclick="NavigateToLogin">Have an account? Login</button>
    </div>
</div>

@code {
    private UserRegisterViewModel registerViewModel = new UserRegisterViewModel();
    private DataContext dbContext = new DataContext();

    private async Task HandleRegister()
    {
        if (await RegisterUser(registerViewModel))
        {
            Navigation.NavigateTo("/login");
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Registration failed. Please try again.");
        }
    }

    private async Task<bool> RegisterUser(UserRegisterViewModel viewModel)
    {
        var existingUser = await dbContext.Users
            .FirstOrDefaultAsync(u => u.Email == viewModel.Email);
        if (existingUser != null)
        {
            await JS.InvokeVoidAsync("alert", "Email already exists.");
            return false;
        }

        var newUser = new User
            {
                FullName = viewModel.FullName,
                Email = viewModel.Email,
                Password = HashPassword(viewModel.Password),
                Color = viewModel.Background 
            };

        dbContext.Users.Add(newUser);
        await dbContext.SaveChangesAsync();
        NotificationsViewModel.CreateNotification(newUser.FullName, null, NotificationType.UserAdded, null);
        return true;
    }

    private string HashPassword(string password)
    {
        return BCrypt.Net.BCrypt.HashPassword(password);
    }

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }
}
