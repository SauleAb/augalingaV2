@page "/projects"
@using System.Collections.ObjectModel
@using Microsoft.EntityFrameworkCore
@using augalinga.Backend.Models
@using augalinga.Backend.Services
@using augalinga.Backend.ViewModels
@using augalinga.Data.Access
@using augalinga.Data.Entities
@using augalinga.Data.Enums
@inject NavigationManager Navigation
@inject DataContext DataContext
@inject IAuthService IAuthService
@inject INotificationService NotificationService
@inject IJSRuntime JS

<div class="header">
    <div style="flex: 1">
        <button @onclick="GoBack" class="back-button"><i class="bi bi-arrow-left h2"></i></button>
    </div>
    <h1>Projects</h1>
    <div style="flex: 1; display: flex; justify-content: flex-end;">
        <button class="add-button" @onclick="OpenModal"><i class="bi bi-plus-lg h2"></i></button>
    </div>
</div>
<div class="container">
    @foreach (Project project in viewModel.Projects)
    {
        <NavLink href="@($"projectMenu/{project.Id}")" style="text-decoration: none;">
            <div class="card">
                <img class="card-img-top" src="@GetBlobUrl(project.Name, project.ImageUrl)" alt="Project Image">
                <div class="card-body">
                    <h5 class="card-title">@project.Name</h5>
                </div>
            </div>
        </NavLink>
    }
</div>


<div class="modal show" style="display:none;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add a project</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="HideModal"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col">
                        <div class="form-group">
                            <label for="projectName">Project name:</label>
                            <input type="text" class="form-control" id="projectName" @bind="project.Name" required />

                            <label for="fileInput">Select project image:</label>
                            <InputFile id="fileInput" OnChange="HandleFileSelect" />

                            @if (selectedFile != null)
                            {
                                <p>Selected file: @selectedFile.Name</p>
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="AddProject">Submit</button>
            </div>
        </div>
    </div>
</div>

@code {
    ProjectsViewModel viewModel;
    Project project = new Project();
    private IBrowserFile selectedFile;

    protected override async Task OnInitializedAsync()
    {
        viewModel = new ProjectsViewModel(DataContext);
    }

    private void HandleFileSelect(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    private async Task AddProject()
    {
        await viewModel.AddProjectAsync(project, selectedFile, NotificationService);

        project = new Project();
        selectedFile = null;

        await HideModal();
    }

    private string GetBlobUrl(string projectName, string imageName)
    {
        return viewModel.GetBlobUrl(projectName, imageName);
    }

    private void GoBack()
    {
        Navigation.NavigateTo($"/");
    }

    public async Task OpenModal()
    {
        await JS.InvokeVoidAsync("showModal");
    }

    public async Task HideModal()
    {
        await JS.InvokeVoidAsync("hideModal");
    }
}

<style>
    .container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        padding: 20px;
        gap: 20px;
    }

    .card {
        width: 250px;
        text-decoration: none;
        border: 1px solid #ccc;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s;
        background-color: #f7f7f7;
        display: flex;
        flex-direction: column;
    }

        .card:hover {
            transform: scale(1.05);
        }

        .card img {
            width: 100%;
            height: 150px;
            object-fit: cover;
        }

    .card-body {
        padding: 10px;
        text-align: center;
        flex-grow: 1;
    }

    .card-title {
        margin: 0;
        font-size: 1.25rem;
        color: #333;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .card a {
        text-decoration: none;
        color: black;
    }

        .card a:hover {
            text-decoration: none;
            color: black;
        }

    .card h5 {
        text-decoration: none;
        color: black;
    }

    .card a:link .card-title,
    .card a:visited .card-title,
    .card a:hover .card-title,
    .card a:active .card-title {
        text-decoration: none;
        color: black;
    }
</style>

<script>
    window.showModal = () => {
        const modal = document.querySelector('.modal');
        if (modal) {
            modal.style.display = 'block';
            modal.classList.add('show');
        }
    };

    window.hideModal = () => {
        const modal = document.querySelector('.modal');
        if (modal) {
            modal.style.display = 'none';
            modal.classList.remove('show');
        }
    };
</script>
