@page "/projectMenu/{projectId:int}"
@using BootstrapBlazor.Components
@using Microsoft.EntityFrameworkCore
@using Syncfusion.Blazor.Popups
@using augalinga.Backend.Models
@using augalinga.Backend.ViewModels
@using augalinga.Backend.Services
@using augalinga.Data.Access
@using augalinga.Data.Entities
@using augalinga.Data.Enums
@inject NavigationManager Navigation
@inject DataContext DataContext
@inject INotificationService NotificationService

<div class="header">
    <div style="flex: 1">
        <button @onclick="GoBack" class="back-button"><i class="bi bi-arrow-left h2"></i></button>
    </div>
    <h1>@project.Name</h1>
    <div style="flex: 1; display: flex; justify-content: flex-end;">
        <button class="edit-button" @onclick="OpenEditDialog"><i class="bi bi-pencil h2"></i></button>
        <button class="delete-button" @onclick="OpenDeleteConfirmation"><i class="bi bi-trash3 h2"></i></button>
    </div>
</div>

<SfDialog Width="300px" IsModal="true" ShowCloseIcon="true" Visible="@isDeleteConfirmationVisible" @ref="deleteConfirmationDialog">
    <DialogTemplates>
        <Header>Confirm Delete</Header>
        <Content>
            <p>Are you sure you want to delete this project?</p>
        </Content>
        <FooterTemplate>
            <button class="btn btn-danger" @onclick="ConfirmDelete">Yes</button>
            <button class="btn btn-secondary" @onclick="CloseDeleteConfirmation">No</button>
        </FooterTemplate>
    </DialogTemplates>
</SfDialog>

<SfDialog Width="400px" IsModal="true" ShowCloseIcon="true" Visible="@isEditDialogVisible" @ref="editDialog">
    <DialogTemplates>
        <Header>Edit Project</Header>
        <Content>
            <div class="form-group">
                <label for="projectName">Project Name</label>
                <input type="text" id="projectName" class="form-control" @bind="updatedProjectName" />
            </div>
            <div class="form-group">
                <label for="projectPhoto">Project Photo</label>
                @if (!string.IsNullOrEmpty(currentPhotoUrl))
                {
                    <img src="@currentPhotoUrl" class="current-photo" alt="@GetFileNameFromUrl(currentPhotoUrl)" />
                }
                <InputFile id="fileInput" OnChange="HandlePhotoUpload" class="form-control" />
            </div>
        </Content>
        <FooterTemplate>
            <button class="btn btn-primary" @onclick="SaveChanges">Save</button>
            <button class="btn btn-secondary" @onclick="CloseEditDialog">Cancel</button>
        </FooterTemplate>
    </DialogTemplates>
</SfDialog>

<div class="row">
    <div class="column">
        <NavLink class="card" href="@($"projectContacts/{projectId}")">
            <img src="../images/contacts.svg" />
            <h2>Contacts</h2>
        </NavLink>
        <NavLink class="card" href="@($"projectPhotos/{projectId}")">
            <img src="../images/photos.svg" />
            <h2>Photos</h2>
        </NavLink>
        <NavLink class="card" href="@($"projectDocuments/{projectId}")">
            <img src="../images/documents.svg" />
            <h2>Documents</h2>
        </NavLink>
    </div>
    <div class="column">
        <NavLink class="card" href="@($"projectOrders/{projectId}")">
            <img src="../images/orders.svg" />
            <h2>Orders</h2>
        </NavLink>
        <NavLink class="card" href="@($"projectDrafts/{projectId}")">
            <img src="../images/drafts.svg" />
            <h2>Drafts</h2>
        </NavLink>
        <NavLink class="card" href="@($"projectFinances/{projectId}")">
            <img src="../images/finances.svg" />
            <h2>Finances</h2>
        </NavLink>
    </div>
</div>

@code {
    [Parameter]
    public int projectId { get; set; }

    private Project project = new Project();
    private SfDialog deleteConfirmationDialog;
    private SfDialog editDialog;
    private bool isDeleteConfirmationVisible = false;
    private bool isEditDialogVisible = false;
    ProjectMenuViewModel viewModel;
    private string updatedProjectName;
    private IBrowserFile selectedPhoto;
    private string currentPhotoUrl;

    protected override async Task OnInitializedAsync()
    {
        viewModel = new ProjectMenuViewModel(DataContext);

        try
        {
            await viewModel.LoadProjectAsync(projectId);
            currentPhotoUrl = viewModel.GetBlobUrl(viewModel.Project.Name, viewModel.Project.ImageUrl);
        }
        catch
        {
            Navigation.NavigateTo("/projects");
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/projects");
    }

    private void OpenDeleteConfirmation()
    {
        isDeleteConfirmationVisible = true;
    }

    private void CloseDeleteConfirmation()
    {
        isDeleteConfirmationVisible = false;
    }

    private void OpenEditDialog()
    {
        updatedProjectName = project.Name;
        currentPhotoUrl = project.ImageUrl; 
        isEditDialogVisible = true;
    }

    private void CloseEditDialog()
    {
        isEditDialogVisible = false;
    }

    private async Task HandlePhotoUpload(InputFileChangeEventArgs e)
    {
        selectedPhoto = e.File;
    }

    private async Task SaveChanges()
    {
        await viewModel.SaveProjectChangesAsync(updatedProjectName, selectedPhoto, NotificationService);
        currentPhotoUrl = viewModel.GetBlobUrl(viewModel.Project.Name, viewModel.Project.ImageUrl);
        CloseEditDialog();
    }

    private async Task ConfirmDelete()
    {
        await viewModel.DeleteProjectAsync(NotificationService);
        GoBack();
    }

    private string GetFileNameFromUrl(string url)
    {
        return url?.Substring(url.LastIndexOf('/') + 1);
    }
}



<style>
    .row {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: space-around;
        margin-top: 20px;
    }

    .column {
        display: flex;
        flex-direction: column;
        align-items: center;
        flex: 1;
    }

    .card {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        height: 22vh;
        width: 35vw;
        border: 1px solid #ccc;
        border-radius: 10px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        text-align: center;
        margin-bottom: 20px;
        text-decoration: none;
        color: inherit;
        background-color: white;
        transition: transform 0.3s ease;
    }

        .card:hover {
            transform: scale(1.05);
            color: lightgray;
        }

        .card img {
            width: 20%;
            height: auto;
            margin-bottom: 10px;
        }

        .card h2 {
            font-size: 2vw;
            margin: 0;
            width: 70%;
            overflow: hidden;
            white-space: nowrap;
            text-overflow: ellipsis;
        }

    .current-photo {
        width: 100%;
        height: auto;
        margin-bottom: 10px;
    }

    Media
    screen and (max-width: 768px) {
        .column

    {
        flex: auto;
        justify-content: center;
    }

    .card {
        width: 90%;
        flex-direction: column;
        height: 150px;
    }

        .card h2 {
            font-size: 4vw;
        }

</style>
