@page "/"
@using Syncfusion.Blazor.Schedule
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Buttons
@using augalinga.ApplicationLayer.Components.ViewModels
@using augalinga.Data.Entities
@using augalinga.Data.Access
@code {
    public DataContext dbContext { get; set; } = new DataContext();
    CalendarViewModel calendarViewModel { get; set; } = new CalendarViewModel();
    private string selectedEmployee;
    private bool isAllDayChecked = false;
    public List<string> CustomClass = new List<string>() { "custom-class" };


    public void OnEventRendered(EventRenderedArgs<Meeting> args)
    {
        isAllDayChecked = args.Data.IsAllDay;
        selectedEmployee = args.Data.Employee;
        if (selectedEmployee == "Baronaite")
        {
            args.CssClasses = new List<string> { "baronaite-background" };
        }
        else if (selectedEmployee == "Gudaityte")
        {
            args.CssClasses = new List<string> { "gudaityte-background" };
        }
        else if (selectedEmployee == "Both")
        {
            args.CssClasses = new List<string> { "both-background" };
        }
        else
        {
            args.CssClasses = CustomClass;
        }
    }

    private string GetSelectedColor()
    {
        return selectedEmployee switch
        {
            "Baronaite" => "#FFFFD700", // Yellow
            "Gudaityte" => "#1A9BAB",   // Electric
            "Both" => "#E7344C",        // Red
            _ => "#FFFFFFFF",           // Default color
        };
    }

    public async void OnActionCompleted(ActionEventArgs<Meeting> args)
    {
        if (args.ActionType == ActionType.EventCreate)
        {
            if (args.AddedRecords != null)
            {
                foreach (var addedEvent in args.AddedRecords)
                {
                    if (addedEvent.Notes == null)
                    {
                        addedEvent.Notes = "";
                    }
                    addedEvent.Background = GetSelectedColor();
                    addedEvent.Employee = selectedEmployee;
                    if (isAllDayChecked)
                    {
                        addedEvent.IsAllDay = true;
                    }
                    Meeting meeting = new Meeting
                        {
                            From = addedEvent.From,
                            To = addedEvent.To,
                            EventName = addedEvent.EventName,
                            IsAllDay = addedEvent.IsAllDay,
                            Notes = addedEvent.Notes,
                            Background = addedEvent.Background,
                            Employee = addedEvent.Employee
                        };
                    dbContext.Meetings.Add(meeting);
                }
            }
        }

        if (args.ActionType == ActionType.EventChange)
        {
            if (args.ChangedRecords != null)
            {
                foreach (var editedEvent in args.ChangedRecords)
                {
                    var existingEvent = calendarViewModel.Events.FirstOrDefault(e => e.Id == editedEvent.Id);
                    if (editedEvent.Notes == null)
                    {
                        editedEvent.Notes = "";
                    }
                    editedEvent.Background = GetSelectedColor();
                    editedEvent.Employee = selectedEmployee;
                    if(isAllDayChecked)
                    {
                        editedEvent.IsAllDay = true;
                    }
                    else
                    {
                        editedEvent.IsAllDay = false;
                    }
                    if (existingEvent != null)
                    {
                        existingEvent.From = editedEvent.From;
                        existingEvent.To = editedEvent.To;
                        existingEvent.IsAllDay = editedEvent.IsAllDay;
                        existingEvent.EventName = editedEvent.EventName;
                        existingEvent.Notes = editedEvent.Notes;
                        existingEvent.Background = GetSelectedColor();
                        existingEvent.Employee = selectedEmployee;

                        dbContext.Meetings.Update(existingEvent);
                    }
                }
            }
        }

        if (args.ActionType == ActionType.EventRemove)
        {
            if (args.DeletedRecords != null)
            {
                foreach (var deletedEvent in args.DeletedRecords)
                {
                    var eventToRemove = dbContext.Meetings.FirstOrDefault(e => e.Id == deletedEvent.Id);
                    if (eventToRemove != null)
                    {
                        dbContext.Meetings.Remove(eventToRemove);
                    }
                }
            }
        }
        await dbContext.SaveChangesAsync();
    }
}

<SfSchedule TValue="Meeting">
    <ScheduleEvents TValue="Meeting" ActionCompleted="OnActionCompleted" EventRendered="OnEventRendered"></ScheduleEvents>
    <ScheduleEventSettings DataSource="@calendarViewModel.Events">
        <ScheduleField Id="Id">
            <FieldSubject Name="EventName"></FieldSubject>
            <FieldDescription Name="Notes"></FieldDescription>
            <FieldIsAllDay Name="IsAllDay"></FieldIsAllDay>
            <FieldStartTime Name="From"></FieldStartTime>
            <FieldEndTime Name="To"></FieldEndTime>
        </ScheduleField>
    </ScheduleEventSettings>
    <ScheduleViews>
        <ScheduleView Option="View.Day"></ScheduleView>
        <ScheduleView Option="View.Week"></ScheduleView>
        <ScheduleView Option="View.WorkWeek"></ScheduleView>
        <ScheduleView Option="View.Month"></ScheduleView>
        <ScheduleView Option="View.Agenda"></ScheduleView>
    </ScheduleViews>

    <ScheduleTemplates>
        <EditorTemplate>
            <table class="custom-event-editor" width="100%" cellpadding="5">
                <tbody>
                    <tr>
                        <td class="e-textlabel">Name</td>
                        <td colspan="4">
                            <SfTextBox @bind-Value="(context as Meeting).EventName"></SfTextBox>
                        </td>
                    </tr>
                    <tr>
                        <td class="e-textlabel">From</td>
                        <td colspan="4">
                            <SfDateTimePicker @bind-Value="(context as Meeting).From"></SfDateTimePicker>
                        </td>
                    </tr>
                    <tr>
                        <td class="e-textlabel">To</td>
                        <td colspan="4">
                            <SfDateTimePicker @bind-Value="(context as Meeting).To"></SfDateTimePicker>
                        </td>
                    </tr>
                    <tr>
                        <td class="e-textlabel">All day</td>
                        <td colspan="4">
                            <SfCheckBox @bind-Checked="@isAllDayChecked"></SfCheckBox>
                        </td>
                    </tr>
                    <tr>
                        <td class="e-textlabel">For</td>
                        <td colspan="4">
                            <SfRadioButton Label="Baronaite" Value="Baronaite" Name="Employee" @bind-Checked="selectedEmployee"></SfRadioButton>
                            <SfRadioButton Label="Gudaityte" Value="Gudaityte" Name="Employee" @bind-Checked="selectedEmployee"></SfRadioButton>
                            <SfRadioButton Label="Both" Value="Both" Name="Employee" @bind-Checked="selectedEmployee"></SfRadioButton>
                        </td>
                    </tr>
                    <tr>
                        <td class="e-textlabel">Notes</td>
                        <td colspan="4">
                            <SfTextBox Multiline="true" @bind-Value="(context as Meeting).Notes"></SfTextBox>
                        </td>
                    </tr>
                </tbody>
            </table>
        </EditorTemplate>
    </ScheduleTemplates>
</SfSchedule>

<style>
    .e-schedule .e-vertical-view .e-all-day-appointment-wrapper .e-appointment.baronaite-background,
    .e-schedule .e-vertical-view .e-day-wrapper .e-appointment.baronaite-background,
    .e-schedule .e-month-view .e-appointment.baronaite-background {
        background: #ffd700 !important;
    }

    .e-schedule .e-vertical-view .e-all-day-appointment-wrapper .e-appointment.gudaityte-background,
    .e-schedule .e-vertical-view .e-day-wrapper .e-appointment.gudaityte-background,
    .e-schedule .e-month-view .e-appointment.gudaityte-background {
        background: #1A9BAB !important;
    }

    .e-schedule .e-vertical-view .e-all-day-appointment-wrapper .e-appointment.both-background,
    .e-schedule .e-vertical-view .e-day-wrapper .e-appointment.both-background,
    .e-schedule .e-month-view .e-appointment.both-background {
        background: #E7344C !important;
    }

    .e-schedule .e-vertical-view .e-all-day-appointment-wrapper .e-appointment.custom-class,
    .e-schedule .e-vertical-view .e-day-wrapper .e-appointment.custom-class,
    .e-schedule .e-month-view .e-appointment.custom-class {
        background: #32CD32 !important;
    }
</style>
