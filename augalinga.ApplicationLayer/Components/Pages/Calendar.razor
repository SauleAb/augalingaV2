@page "/"
@using Microsoft.EntityFrameworkCore
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Schedule
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Buttons
@using augalinga.Backend.ViewModels
@using augalinga.Data.Entities
@using augalinga.Data.Access

<div class="calendar-container">
    <SfSchedule TValue="Meeting" StartHour="07:00" EnableAllDayScroll="true">
        <ScheduleEvents TValue="Meeting" ActionCompleted="OnActionCompleted" EventRendered="OnEventRendered"></ScheduleEvents>
        <ScheduleEventSettings DataSource="@calendarViewModel.Events">
            <ScheduleField Id="Id">
                <FieldSubject Name="EventName"></FieldSubject>
                <FieldDescription Name="Notes"></FieldDescription>
                <FieldIsAllDay Name="IsAllDay"></FieldIsAllDay>
                <FieldStartTime Name="From"></FieldStartTime>
                <FieldEndTime Name="To"></FieldEndTime>
                <EventSettingsField Name="BackgroundColor"></EventSettingsField>
            </ScheduleField>
        </ScheduleEventSettings>
        <ScheduleViews>
            <ScheduleView Option="View.Day"></ScheduleView>
            <ScheduleView Option="View.Week"></ScheduleView>
            <ScheduleView Option="View.WorkWeek"></ScheduleView>
            <ScheduleView Option="View.Month"></ScheduleView>
            <ScheduleView Option="View.Agenda"></ScheduleView>
        </ScheduleViews>

        <ScheduleTemplates>
            <EditorTemplate>
                <table class="custom-event-editor" width="100%" cellpadding="5">
                    <tbody>
                        <tr>
                            <td class="e-textlabel">Name</td>
                            <td colspan="4">
                                <SfTextBox @bind-Value="(context as Meeting).EventName"></SfTextBox>
                            </td>
                        </tr>
                        <tr>
                            <td class="e-textlabel">From</td>
                            <td colspan="4">
                                <SfDateTimePicker @bind-Value="(context as Meeting).From"></SfDateTimePicker>
                            </td>
                        </tr>
                        <tr>
                            <td class="e-textlabel">To</td>
                            <td colspan="4">
                                <SfDateTimePicker @bind-Value="(context as Meeting).To"></SfDateTimePicker>
                            </td>
                        </tr>
                        <tr>
                            <td class="e-textlabel">All day</td>
                            <td colspan="4">
                                <SfCheckBox @bind-Checked="(context as Meeting).IsAllDay"></SfCheckBox>
                            </td>
                        </tr>
                        <tr>
                            <td class="e-textlabel">For</td>
                            <td colspan="4">
                                <SfDropDownList TItem="User" TValue="int?" DataSource="@calendarViewModel.Users" @bind-Value="(context as Meeting).UserId">
                                    <DropDownListFieldSettings Text="Username" Value="Id"></DropDownListFieldSettings>
                                    <SfDropDownListItem Text="Everyone" Value="null"></SfDropDownListItem>
                                </SfDropDownList>
                            </td>
                        </tr>
                        <tr>
                            <td class="e-textlabel">Notes</td>
                            <td colspan="4">
                                <SfTextBox Multiline="true" @bind-Value="(context as Meeting).Notes"></SfTextBox>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </EditorTemplate>
        </ScheduleTemplates>
    </SfSchedule>
</div>
<div class="user-filter-container">
    @if (usersViewModel.Users != null && usersViewModel.Users.Any())
    {
        @foreach (var user in usersViewModel.Users)
        {
            <SfCheckBox @bind-Checked="@user.IsChecked" @onclick="() => OnUserSelectionChanged(user)" Label="@user.Username" >
            </SfCheckBox>
        }
    }
    else
    {
        <p>No users available to display.</p>
    }
    </div>

@code {
    public DataContext dbContext { get; set; } = new DataContext();
    CalendarViewModel calendarViewModel { get; set; } = new CalendarViewModel();
    UsersViewModel usersViewModel { get; set; } = new UsersViewModel();
    public List<string> CustomClass { get; set; } = new List<string>(); // Define the CustomClass list

    public void OnEventRendered(EventRenderedArgs<Meeting> args)
    {
        if (!string.IsNullOrEmpty(args.Data.BackgroundColor))
        {
            var colorClass = "custom-bg-" + args.Data.BackgroundColor.TrimStart('#');
            args.CssClasses = new List<string> { colorClass };

            if (!CustomClass.Contains(colorClass))
            {
                CustomClass.Add(colorClass);
            }
        }
    }

    private void OnUserSelectionChanged(User user)
    {
        // Toggle the IsChecked property
        user.IsChecked = !user.IsChecked;

        // Update the event filtering based on selected users
        var selectedUsers = usersViewModel.Users.Where(u => u.IsChecked).ToList();
        calendarViewModel.LoadEvents(selectedUsers);
    }

    public async void OnActionCompleted(ActionEventArgs<Meeting> args)
    {
        if (args.ActionType == ActionType.EventCreate)
        {
            if (args.AddedRecords != null)
            {
                foreach (var addedEvent in args.AddedRecords)
                {

                    // Check if UserId is null
                    if (addedEvent.UserId == null)
                    {
                        addedEvent.BackgroundColor = "#808080"; 
                    }
                    else
                    {
                        var user = await dbContext.Users.FirstOrDefaultAsync(u => u.Id == addedEvent.UserId);
                        if (user != null)
                        {
                            addedEvent.BackgroundColor = user.Color; 
                        }
                    }

                    Meeting meeting = new Meeting
                    {
                        From = addedEvent.From,
                        To = addedEvent.To,
                        EventName = addedEvent.EventName,
                        IsAllDay = addedEvent.IsAllDay,
                        Notes = addedEvent.Notes,
                        UserId = addedEvent.UserId,
                        BackgroundColor = addedEvent.BackgroundColor
                    };

                    dbContext.Meetings.Add(meeting);
                    calendarViewModel.Events.Add(meeting);

                    if (!string.IsNullOrEmpty(meeting.BackgroundColor))
                    {
                        var colorClass = "custom-bg-" + meeting.BackgroundColor.TrimStart('#');
                        if (!CustomClass.Contains(colorClass))
                        {
                            CustomClass.Add(colorClass);
                        }
                    }
                }
            }
        }

        if (args.ActionType == ActionType.EventRemove)
        {
            if (args.DeletedRecords != null)
            {
                foreach (var deletedEvent in args.DeletedRecords)
                {
                    var eventToRemove = dbContext.Meetings.FirstOrDefault(e => e.Id == deletedEvent.Id);
                    if (eventToRemove != null)
                    {
                        dbContext.Meetings.Remove(eventToRemove);
                        calendarViewModel.Events.Remove(eventToRemove);
                    }
                }
            }
        }

        if (args.ActionType == ActionType.EventChange)
        {
            if (args.ChangedRecords != null)
            {
                foreach (var editedEvent in args.ChangedRecords)
                {
                    var existingEvent = calendarViewModel.Events.FirstOrDefault(e => e.Id == editedEvent.Id);

                    if (editedEvent.UserId == null)
                    {
                        editedEvent.BackgroundColor = "#808080"; // Gray color
                    }
                    else
                    {
                        var user = await dbContext.Users.FirstOrDefaultAsync(u => u.Id == editedEvent.UserId);
                        if (user != null)
                        {
                            existingEvent.BackgroundColor = user.Color; 
                            existingEvent.UserId = editedEvent.UserId;
                        }
                    }
                    existingEvent.From = editedEvent.From;
                    existingEvent.To = editedEvent.To;
                    existingEvent.IsAllDay = editedEvent.IsAllDay;
                    existingEvent.EventName = editedEvent.EventName;
                    existingEvent.Notes = editedEvent.Notes;
                    dbContext.Meetings.Update(existingEvent);
                }
            }
        }
        await dbContext.SaveChangesAsync();
        StateHasChanged();
        calendarViewModel = new CalendarViewModel();
    }
}

<style>
    @foreach (var cssClass in CustomClass)
    {
        <text>
            .@cssClass {
                background-color: #@(cssClass.Replace("custom-bg-", "")) !important;
            }
        </text>
    }

    .calendar-container {
        height: 80vh;
        overflow: hidden;
        margin: 10px;
        position: relative;
    }

    .e-schedule {
        height: 100% !important;
        overflow-y: auto !important;
        overflow-x: hidden;
    }

    .e-content {
        height: calc(100% - 50px);
        overflow-y: auto;
    }

    .user-filter-container {
        bottom:0;
        z-index: 2;
        display: flex;
        flex-direction: row;
        gap: 10px;
    }
</style>
