@page "/"
@using Microsoft.EntityFrameworkCore
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Schedule
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Buttons
@using augalinga.Backend.Services
@using augalinga.Backend.ViewModels
@using augalinga.Data.Entities
@using augalinga.Data.Access
@using augalinga.Data.Enums
@inject INotificationService NotificationService
@inject DataContext DataContext
@inject IAuthService IAuthService

<div class="calendar-container">
    <SfSchedule TValue="Meeting" StartHour="07:00" EnableAllDayScroll="true">
        <ScheduleEvents TValue="Meeting" ActionCompleted="OnActionCompleted" EventRendered="OnEventRendered"></ScheduleEvents>
        <ScheduleEventSettings DataSource="@calendarViewModel.Events">
            <ScheduleField Id="Id">
                <FieldSubject Name="EventName"></FieldSubject>
                <FieldDescription Name="Notes"></FieldDescription>
                <FieldIsAllDay Name="IsAllDay"></FieldIsAllDay>
                <FieldStartTime Name="From"></FieldStartTime>
                <FieldEndTime Name="To"></FieldEndTime>
                <EventSettingsField Name="BackgroundColor"></EventSettingsField>
            </ScheduleField>
        </ScheduleEventSettings>
        <ScheduleViews>
            <ScheduleView Option="View.Day"></ScheduleView>
            <ScheduleView Option="View.Week"></ScheduleView>
            <ScheduleView Option="View.WorkWeek"></ScheduleView>
            <ScheduleView Option="View.Month"></ScheduleView>
            <ScheduleView Option="View.Agenda"></ScheduleView>
        </ScheduleViews>

        <ScheduleTemplates>
            <EditorTemplate>
                <table class="custom-event-editor" width="100%" cellpadding="5">
                    <tbody>
                        <tr>
                            <td class="e-textlabel">Name</td>
                            <td colspan="4">
                                <SfTextBox @bind-Value="(context as Meeting).EventName"></SfTextBox>
                            </td>
                        </tr>
                        <tr>
                            <td class="e-textlabel">From</td>
                            <td colspan="4">
                                <SfDateTimePicker @bind-Value="(context as Meeting).From"></SfDateTimePicker>
                            </td>
                        </tr>
                        <tr>
                            <td class="e-textlabel">To</td>
                            <td colspan="4">
                                <SfDateTimePicker @bind-Value="(context as Meeting).To"></SfDateTimePicker>
                            </td>
                        </tr>
                        <tr>
                            <td class="e-textlabel">All day</td>
                            <td colspan="4">
                                <SfSwitch @bind-Checked="(context as Meeting).IsAllDay"></SfSwitch>
                            </td>
                        </tr>
                        <tr>
                            <td class="e-textlabel">Assign to All Users</td>
                            <td colspan="4">
                                <SfSwitch @bind-Checked="(context as Meeting).IsAssignedToAllUsers" @onchange="() => OnAssignToAllUsersChanged(context as Meeting)">
                                </SfSwitch>
                            </td>
                        </tr>
                        <tr>
                            <td class="e-textlabel">For</td>
                            <td colspan="4">
                                <SfMultiSelect TValue="List<User>" TItem="User" Placeholder="User" DataSource="@calendarViewModel.Users" 
                                @bind-Value="(context as Meeting).SelectedUsers" Enabled="!(context as Meeting).IsAssignedToAllUsers" @onchange="() => OnSelectedUsersChanged(context as Meeting)">
                                    <MultiSelectFieldSettings Text="FullName" Value="Id"></MultiSelectFieldSettings>
                                </SfMultiSelect>
                            </td>
                        </tr>
                        <tr>
                            <td class="e-textlabel">Notes</td>
                            <td colspan="4">
                                <SfTextBox Multiline="true" @bind-Value="(context as Meeting).Notes"></SfTextBox>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </EditorTemplate>
        </ScheduleTemplates>
    </SfSchedule>
</div>

<div class="user-filter-container">
    @if (usersViewModel.Users != null && usersViewModel.Users.Any())
    {
        <div class="filter-text">Filter by:</div>
        @foreach (var user in usersViewModel.Users)
        {
            <div style="display: flex; flex-direction: row; align-items: center; cursor: pointer;">
                <SfCheckBox @bind-Checked="@user.IsChecked" @onclick="() => OnUserSelectionChanged(user)" />
                <label style="color:@user.Color; margin-left: 2px;">@user.FullName</label>
            </div>
        }
    }
    else
    {
        <p>No users available to display.</p>
    }
</div>

@code {
    CalendarViewModel calendarViewModel;
    UsersViewModel usersViewModel { get; set; } = new UsersViewModel();
    public List<string> CustomClass { get; set; } = new List<string>();
    Meeting meeting;

    protected override void OnInitialized()
    {
        calendarViewModel = new CalendarViewModel(NotificationService, DataContext);
        calendarViewModel.Initialize();
    }

    public void OnEventRendered(EventRenderedArgs<Meeting> args)
    {
        if (!string.IsNullOrEmpty(args.Data.BackgroundColor))
        {
            var colorClass = "custom-bg-" + args.Data.BackgroundColor.TrimStart('#');
            args.CssClasses = new List<string> { colorClass };

            if (!CustomClass.Contains(colorClass))
            {
                CustomClass.Add(colorClass);
            }
        }
    }

    private void OnSelectedUsersChanged(Meeting meeting)
    {
        calendarViewModel.IsAssignToAllUsersCheck(meeting);
    }

    private void OnUserSelectionChanged(User user)
    {
        user.IsChecked = !user.IsChecked;
        var selectedUsers = usersViewModel.Users.Where(u => u.IsChecked).Select(u => u.Id).ToList();
        calendarViewModel.LoadEvents(selectedUsers);
        StateHasChanged(); 
    }

    private void OnAssignToAllUsersChanged(Meeting meeting)
    {
        calendarViewModel.ToggleAssignToAllUsers(meeting);
    }

    public async void OnActionCompleted(ActionEventArgs<Meeting> args)
    {
        if (args.ActionType == ActionType.EventCreate && args.AddedRecords != null)
        {
            foreach (var addedEvent in args.AddedRecords)
            {
                await calendarViewModel.CreateEvent(addedEvent);
                StateHasChanged();
            }
        }

        if (args.ActionType == ActionType.EventRemove && args.DeletedRecords != null)
        {
            foreach (var deletedEvent in args.DeletedRecords)
            {
                await calendarViewModel.DeleteEvent(deletedEvent);
                StateHasChanged();
            }
        }

        if (args.ActionType == ActionType.EventChange && args.ChangedRecords != null)
        {
            foreach (var editedEvent in args.ChangedRecords)
            {
                await calendarViewModel.ModifyEvent(editedEvent);
                StateHasChanged();
            }
        }

        StateHasChanged();
    }
}

<style>
    @foreach (var cssClass in CustomClass)
    {
        <text>
            .@cssClass {
                background-color: #@(cssClass.Replace("custom-bg-", "")) !important;
            }
        </text>
    }

    .calendar-container {
        height: 80vh;
        overflow: hidden;
        margin: 10px;
        position: relative;
        background-color: #f9f9f9;
        border-radius: 8px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    /* Syncfusion Schedule styles */
    .e-schedule {
        height: 100% !important;
        overflow-y: auto !important;
        overflow-x: hidden;
        color: #518478;
    }

    .e-schedule .e-toolbar {
        background-color: #518478 !important;
        color: #f9f9f9 !important;
    }

    .e-schedule .e-toolbar-item.e-tbar-btn {
        background-color: #518478 !important;
        color: #f9f9f9 !important;
        border: none !important;
    }

    .e-schedule .e-toolbar-item.e-tbar-btn:hover {
        background-color: #C58C6D !important;
    }

    .e-content {
        height: calc(100% - 50px);
        overflow-y: auto;
        background-color: #f9f9f9;
    }

    .e-current-day {
        background-color: #CADAD7 !important;
        color: black !important;
    }

    /* Selected event styles */
    .e-schedule .e-appointment.e-selected {
        background-color: #C58C6D !important;
        border: 2px solid #518478 !important;
    }

    /* Custom event editor */
    .custom-event-editor {
        width: 100%;
        padding: 15px;
        background-color: #f9f9f9;
        border-radius: 8px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .custom-event-editor td {
        padding: 10px;
        vertical-align: middle;
    }

    .custom-event-editor .e-textlabel {
        font-weight: 600;
        color: #518478;
    }

    .custom-event-editor textarea {
        height: 100px;
    }

    .custom-event-editor input,
    .custom-event-editor select,
    .custom-event-editor textarea {
        border: 1px solid #CADAD7 !important;
        background-color: #f9f9f9;
    }

    .custom-event-editor input:focus,
    .custom-event-editor select:focus,
    .custom-event-editor textarea:focus {
        border-color: #518478 !important;
        outline: none;
    }

    /* Dialog footer buttons */
    .e-schedule-dialog .e-footer-content {
        background-color: #f9f9f9 !important;
        border-top: 1px solid #CADAD7 !important;
        padding-top: 10px !important;
    }

    .e-schedule-dialog .e-footer-content .e-primary {
        background-color: #518478 !important;
        color: #f9f9f9 !important;
        border: none !important;
    }

    .e-schedule-dialog .e-footer-content .e-secondary {
        background-color: #C58C6D !important;
        color: #f9f9f9 !important;
        border: none !important;
    }

    .e-schedule-dialog .e-footer-content .e-primary:hover {
        background-color: #C58C6D !important;
    }

    .e-schedule-dialog .e-footer-content .e-secondary:hover {
        background-color: #518478 !important;
    }


    /* Checkbox container */
    .user-filter-container {
        bottom: 0;
        z-index: 2;
        display: flex;
        flex-direction: row;
        gap: 10px;
        border-radius: 8px;
        flex-wrap: wrap;
        align-items: center;
        padding-top: 3px;
        padding-bottom: 3px;
    }

.user-filter-container .e-checkbox-wrapper .e-frame.e-check {
    background-color: #C58C6D !important; /* Checked state background color */
    border-color: #C58C6D !important; /* Checked state border color */
}

    .e-checkbox-wrapper {
        color: #518478 !important;
    }

    /* To specify font color, background color and border color */
    .e-dialog .e-btn.e-flat, .e-css.e-btn.e-flat {
        background-color: transparent;
        border-color: transparent;
        color: pink;
    }

    .filter-text {
    margin-right: 10px; /* Space between the text and checkboxes */
    font-weight: bold;
    margin-left: 10px;
}

    @@media screen and (max-width: 480px) {
        .user-filter-container {
            flex-direction: column;
            align-items: flex-start;
            justify-content: flex-start;
        }
    }
</style>
