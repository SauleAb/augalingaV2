@page "/"
@using Microsoft.EntityFrameworkCore
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Schedule
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Buttons
@using augalinga.Backend.ViewModels
@using augalinga.Data.Entities
@using augalinga.Data.Access

<div class="calendar-container">
    <SfSchedule TValue="Meeting" StartHour="07:00" EnableAllDayScroll="true">
        <ScheduleEvents TValue="Meeting" ActionCompleted="OnActionCompleted" EventRendered="OnEventRendered"></ScheduleEvents>
        <ScheduleEventSettings DataSource="@calendarViewModel.Events">
            <ScheduleField Id="Id">
                <FieldSubject Name="EventName"></FieldSubject>
                <FieldDescription Name="Notes"></FieldDescription>
                <FieldIsAllDay Name="IsAllDay"></FieldIsAllDay>
                <FieldStartTime Name="From"></FieldStartTime>
                <FieldEndTime Name="To"></FieldEndTime>
                <EventSettingsField Name="BackgroundColor"></EventSettingsField>
            </ScheduleField>
        </ScheduleEventSettings>
        <ScheduleViews>
            <ScheduleView Option="View.Day"></ScheduleView>
            <ScheduleView Option="View.Week"></ScheduleView>
            <ScheduleView Option="View.WorkWeek"></ScheduleView>
            <ScheduleView Option="View.Month"></ScheduleView>
            <ScheduleView Option="View.Agenda"></ScheduleView>
        </ScheduleViews>

        <ScheduleTemplates>
            <EditorTemplate>
                <table class="custom-event-editor" width="100%" cellpadding="5">
                    <tbody>
                        <tr>
                            <td class="e-textlabel">Name</td>
                            <td colspan="4">
                                <SfTextBox @bind-Value="(context as Meeting).EventName"></SfTextBox>
                            </td>
                        </tr>
                        <tr>
                            <td class="e-textlabel">From</td>
                            <td colspan="4">
                                <SfDateTimePicker @bind-Value="(context as Meeting).From"></SfDateTimePicker>
                            </td>
                        </tr>
                        <tr>
                            <td class="e-textlabel">To</td>
                            <td colspan="4">
                                <SfDateTimePicker @bind-Value="(context as Meeting).To"></SfDateTimePicker>
                            </td>
                        </tr>
                        <tr>
                            <td class="e-textlabel">All day</td>
                            <td colspan="4">
                                <SfCheckBox @bind-Checked="(context as Meeting).IsAllDay"></SfCheckBox>
                            </td>
                        </tr>
                        <tr>
                            <td class="e-textlabel">For</td>
                            <td colspan="4">
                                <SfDropDownList TItem="User" TValue="int" DataSource="@calendarViewModel.Users" @bind-Value="(context as Meeting).UserId">
                                    <DropDownListFieldSettings Text="Username" Value="Id"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </td>
                        </tr>
                        <tr>
                            <td class="e-textlabel">Notes</td>
                            <td colspan="4">
                                <SfTextBox Multiline="true" @bind-Value="(context as Meeting).Notes"></SfTextBox>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </EditorTemplate>
        </ScheduleTemplates>
    </SfSchedule>
</div>

@code {
    public DataContext dbContext { get; set; } = new DataContext();
    CalendarViewModel calendarViewModel { get; set; } = new CalendarViewModel();
    public string DropDownValue { get; set; } = "";
    public void OnEventRendered(EventRenderedArgs<Meeting> args)
    {
    }


    public async void OnActionCompleted(ActionEventArgs<Meeting> args)
    {
        if (args.ActionType == ActionType.EventCreate)
        {
            if (args.AddedRecords != null)
            {
                foreach (var addedEvent in args.AddedRecords)
                {
                    if (addedEvent.Notes == null)
                    {
                        addedEvent.Notes = "";
                    }
                    var user = await dbContext.Users.FirstOrDefaultAsync(u => u.Id == addedEvent.UserId);
                    Meeting meeting = new Meeting
                        {
                            From = addedEvent.From,
                            To = addedEvent.To,
                            EventName = addedEvent.EventName,
                            IsAllDay = addedEvent.IsAllDay,
                            Notes = addedEvent.Notes,
                            User = user, 
                            UserId = addedEvent.UserId,
                            BackgroundColor = user?.Color
                        };
                    dbContext.Meetings.Add(meeting);
                }
            }
        }

        if (args.ActionType == ActionType.EventRemove)
        {
            if (args.DeletedRecords != null)
            {
                foreach (var deletedEvent in args.DeletedRecords)
                {
                    var eventToRemove = dbContext.Meetings.FirstOrDefault(e => e.Id == deletedEvent.Id);
                    if (eventToRemove != null)
                    {
                        dbContext.Meetings.Remove(eventToRemove);
                    }
                }
            }
        }

        if (args.ActionType == ActionType.EventChange)
        {
            if (args.ChangedRecords != null)
            {
                foreach (var editedEvent in args.ChangedRecords)
                {
                    var existingEvent = calendarViewModel.Events.FirstOrDefault(e => e.Id == editedEvent.Id);
                    if (editedEvent.Notes == null)
                    {
                        editedEvent.Notes = "";
                    }
                    if (existingEvent != null)
                    {
                        existingEvent.From = editedEvent.From;
                        existingEvent.To = editedEvent.To;
                        existingEvent.IsAllDay = editedEvent.IsAllDay;
                        existingEvent.EventName = editedEvent.EventName;
                        existingEvent.Notes = editedEvent.Notes;
                        existingEvent.User = editedEvent.User;
                        dbContext.Meetings.Update(existingEvent);
                    }
                }
            }
        }

        
        await dbContext.SaveChangesAsync();
    }
}

<style>
    .e-schedule .e-vertical-view .e-all-day-appointment-wrapper .e-appointment.baronaite-background,
    .e-schedule .e-vertical-view .e-day-wrapper .e-appointment.baronaite-background,
    .e-schedule .e-month-view .e-appointment.baronaite-background {
        background: #ffd700 !important;
    }

    .e-schedule .e-vertical-view .e-all-day-appointment-wrapper .e-appointment.gudaityte-background,
    .e-schedule .e-vertical-view .e-day-wrapper .e-appointment.gudaityte-background,
    .e-schedule .e-month-view .e-appointment.gudaityte-background {
        background: #1A9BAB !important;
    }

    .e-schedule .e-vertical-view .e-all-day-appointment-wrapper .e-appointment.both-background,
    .e-schedule .e-vertical-view .e-day-wrapper .e-appointment.both-background,
    .e-schedule .e-month-view .e-appointment.both-background {
        background: #E7344C !important;
    }

    .e-schedule .e-vertical-view .e-all-day-appointment-wrapper .e-appointment.custom-class,
    .e-schedule .e-vertical-view .e-day-wrapper .e-appointment.custom-class,
    .e-schedule .e-month-view .e-appointment.custom-class {
        background: #32CD32 !important;
    }

    .calendar-container {
        height: 80vh; /* Take 80% of the viewport height */
        overflow: hidden; /* Prevent scrolling on the container itself */
        margin: 10px; /* Optional: Add margin around the container */
        position: relative;
    }

    .e-schedule {
        height: 100% !important; /* Ensure the calendar takes up the full height of the container */
        overflow-y: auto !important; /* Allow scrolling inside the calendar */
        overflow-x: hidden; /* Optional: Prevent horizontal scrolling */
    }

    .e-content {
        height: calc(100% - 50px); /* Adjust based on header height, ensures the content part is scrollable */
        overflow-y: auto; /* Allow vertical scrolling inside the content */
    }

</style>
