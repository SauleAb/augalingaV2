@page "/projectOrders/{projectId:int}"
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Grids
@using augalinga.Backend.Models
@using augalinga.Backend.ViewModels
@using augalinga.Data.Access
@using augalinga.Data.Entities
@using Syncfusion.Blazor.Popups
@inject NavigationManager Navigation
@using Syncfusion.Blazor.Inputs
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Maui.Controls
@using System.Text.Json
@using augalinga.Data.Enums
@inject IJSRuntime JS
@inject NotificationsViewModel NotificationsViewModel


<div class="header">
    <div style="flex: 1">
        <button @onclick="GoBack" class="back-button"><i class="bi bi-arrow-left h2"></i></button>
    </div>
    <h1>@project.Name Orders</h1>
    <div style="flex: 1; display: flex; justify-content: flex-end;">
        <button class="add-button" @onclick="OpenModal"><i class="bi bi-plus-lg h2"></i></button>
    </div>
</div>

<SfGrid DataSource="@ordersViewModel.Orders" AllowPaging="true" AllowSelection="true" @ref="ordersGrid">
    <GridColumns>
        <GridColumn Field=@nameof(Order.Name) HeaderText="Name"></GridColumn>
        <GridColumn Field=@nameof(Order.Link) HeaderText="Link"></GridColumn>
        <GridColumn Width="50">
            <Template>
                <img src="../images/download.svg" height="20px" @onclick="(() => DownloadOrder(context as Order))" style="cursor: pointer;" />
            </Template>
        </GridColumn>
        <GridColumn Width="50">
            <Template>
                <img src="../images/delete.png" height="20px" @onclick="(() => DeleteOrder(context as Order))" style="cursor: pointer;" />
            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>


<div class="modal show" style="display:none;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add orders</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="HideModal"></button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="fileInput">Select file:</label>
                    <InputFile id="fileInput" OnChange="HandleFileSelect" multiple />
                    <ul>
                        @if (selectedFiles.Any())
                        {
                            @foreach (var file in selectedFiles)
                            {
                                <li>@file.Name</li>
                            }
                        }
                    </ul>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="UploadFiles">Submit</button>
                </div>
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">@errorMessage</div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int projectId { get; set; }

    OrdersViewModel ordersViewModel;
    public DataContext dbContext { get; set; } = new DataContext();
    private List<IBrowserFile> selectedFiles = new List<IBrowserFile>();
    private string errorMessage;
    private AzureBlobStorage blobStorage;
    private SfGrid<Order> ordersGrid;
    Project project = new Project();
    string folder = "orders";

    protected async override void OnInitialized()
    {
        project = dbContext.Projects.FirstOrDefault(w => w.Id == projectId);
        ordersViewModel = new OrdersViewModel(projectId);
        blobStorage = new AzureBlobStorage();
    }
    private async Task DownloadOrder(Order order)
    {
        try
        {
            await JS.InvokeVoidAsync("open", order.Link, "_blank");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downloading document: {ex.Message}");
        }
    }

    public async Task HideModal()
    {
        await JS.InvokeVoidAsync("hideModal");
    }

    public async Task OpenModal()
    {
        await JS.InvokeVoidAsync("showModal");
    }

    private void GoBack()
    {
        Navigation.NavigateTo($"/projectMenu/{projectId}");
    }

    private void HandleFileSelect(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles().ToList();
    }

    private async Task UploadFiles()
    {
        errorMessage = string.Empty;
        try
        {
            foreach (var file in selectedFiles)
            {
                await blobStorage.UploadFile(project.Name, folder, file);

                string fileUrl = await blobStorage.GetBlobUrlAsync(project.Name, folder, file.Name);

                var order = new Order
                    {
                        ProjectId = projectId,
                        Link = fileUrl,
                        Name = file.Name
                    };

                await dbContext.Orders.AddAsync(order);
                await dbContext.SaveChangesAsync();
                ordersViewModel.AddOrderToCollection(order);
                NotificationsViewModel.CreateNotification(order.Name, project.Name, NotificationType.OrderAdded, null);
            }

            await Task.Delay(800);
            await ordersGrid.Refresh();
            StateHasChanged();

            selectedFiles.Clear();
            await HideModal();
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine($"Error: {ex}");
        }
    }

    private async Task DeleteOrder(Order order)
    {
        dbContext.Orders.Remove(order);
        await dbContext.SaveChangesAsync();

        string blobName = $"{project.Name}/{folder}/{order.Name}";
        await blobStorage.DeleteBlobAsync(blobName);

        await blobStorage.DeleteBlobAsync(order.Link);
        ordersViewModel.Orders.Remove(order);
        NotificationsViewModel.CreateNotification(order.Name, project.Name, NotificationType.OrderDeleted, null);
    }
}
<script>
    window.showModal = () => {
        const modal = document.querySelector('.modal');
        if (modal) {
            modal.style.display = 'block';
        }
    };

    window.hideModal = () => {
        const modal = document.querySelector('.modal');
        if (modal) {
            modal.style.display = 'none';
        }
    };
</script>

<style>
</style>
