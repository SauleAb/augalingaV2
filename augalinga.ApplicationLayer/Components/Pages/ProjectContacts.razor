@page "/projectContacts/{projectId:int}"
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Grids
@using System.Collections.ObjectModel
@using augalinga.ApplicationLayer.Components.ViewModels
@using augalinga.Data.Entities
@inject NavigationManager Navigation
@using Syncfusion.Blazor.Inputs
@inject IJSRuntime JS
@using Microsoft.EntityFrameworkCore
@using augalinga.Data.Access

<div class="header">
    <div style="flex: 1">
        <button @onclick="GoBack" class="back-button"><i class="bi bi-arrow-left h2"></i></button>
    </div>
    <h1>@project?.Name Contacts</h1>
    <div style="flex: 1; display: flex; justify-content: flex-end;">
        <button class="add-button" @onclick="OpenModal"><i class="bi bi-plus-lg h2"></i></button>
    </div>
</div>

<SfGrid DataSource="@contactsViewModel.Contacts" AllowPaging="true">
    <GridColumns>
        <GridColumn Field=@nameof(Contact.Name) HeaderText="Name"></GridColumn>
        <GridColumn Field=@nameof(Contact.Number) HeaderText="Number"></GridColumn>
        <GridColumn Field=@nameof(Contact.Address) HeaderText="Address"></GridColumn>
        <GridColumn Field=@nameof(Contact.Notes) HeaderText="Notes"></GridColumn>
        <GridColumn Width="50">
            <Template>
                <img src="../images/delete.png" height="20px" @onclick="(() => DeleteContact(context as Contact))" style="cursor: pointer;" />
            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>

<div class="modal show" style="display:none;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add a contact</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="HideModal"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col">
                        <div class="form-group">
                            <label for="contactName">Name:</label>
                            <input type="text" class="form-control" id="contactName" @bind="contact.Name" required />
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-group">
                            <label for="contactNumber">Number:</label>
                            <input type="text" class="form-control" id="contactNumber" inputmode="tel" @bind="contact.Number" required />
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <div class="form-group">
                            <label for="contactAddress">Address:</label>
                            <input type="text" class="form-control" id="contactAddress" @bind="contact.Address" />
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <div class="form-group">
                            <label for="contactNotes">Notes:</label>
                            <input type="text" class="form-control" id="contactNotes" @bind="contact.Notes" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="AddContact">Submit</button>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public int projectId { get; set; }
    private DataContext dbContext { get; set; } = new DataContext();
    private Contact contact = new Contact();
    private ContactsViewModel contactsViewModel;
    private Project project = new Project();

    protected override async Task OnInitializedAsync()
    {
        project = await dbContext.Projects.FindAsync(projectId);

        if (project == null)
        {
            Navigation.NavigateTo("/projects");
            return;
        }

        contactsViewModel = new ContactsViewModel(project.Name);
        var contactsList = await dbContext.Contacts
            .Where(c => c.Id == projectId)
            .ToListAsync();

        contactsViewModel.Contacts = new ObservableCollection<Contact>(contactsList);
        contact.Number = "+370";
    }

    private void GoBack()
    {
        Navigation.NavigateTo($"/projectMenu/{projectId}");
    }

    private async Task DeleteContact(Contact contact)
    {
        dbContext.Contacts.Remove(contact);
        await dbContext.SaveChangesAsync();
        contactsViewModel.Contacts.Remove(contact);
    }

    private async Task AddContact()
    {
        contact.Notes = contact.Notes ?? "";
        contact.Address = contact.Address ?? "";
        dbContext.Contacts.Add(contact);
        await dbContext.SaveChangesAsync();
        contactsViewModel.Contacts.Add(contact);
        await HideModal();
    }

    public async Task OpenModal()
    {
        await JS.InvokeVoidAsync("showModal");
    }

    public async Task HideModal()
    {
        await JS.InvokeVoidAsync("hideModal");
    }
}
<script>
    window.showModal = () => {
        const modal = document.querySelector('.modal');
        if (modal) {
            modal.style.display = 'block';
        }
    };

    window.hideModal = () => {
        const modal = document.querySelector('.modal');
        if (modal) {
            modal.style.display = 'none';
        }
    };
</script>
