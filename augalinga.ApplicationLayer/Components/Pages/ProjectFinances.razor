@page "/projectFinances/{projectId:int}"
@using Microsoft.EntityFrameworkCore
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Grids
@using System.Collections.ObjectModel
@using augalinga.Backend.ViewModels
@using augalinga.Data.Entities
@inject IJSRuntime JS
@inject NavigationManager Navigation
@using augalinga.Data.Access
@using augalinga.Data.Enums
@inject NotificationsViewModel NotificationsViewModel

<div class="header">
    <div style="flex: 1">
        <button @onclick="GoBack" class="back-button"><i class="bi bi-arrow-left h2"></i></button>
    </div>
    <h1>@project?.Name Finances</h1>
    <div style="flex: 1; display: flex; justify-content: flex-end;">
        <button class="add-button" @onclick="OpenModal"><i class="bi bi-plus-lg h2"></i></button>
    </div>
</div>

<div class="container">
    <div class="row">
        <div class="card">
            <div class="label">Income</div>
            <div class="amount">@income€</div>
        </div>
        <div class="card">
            <div class="label">Expenses</div>
            <div class="amount">@outcome€</div>
        </div>
        <div class="card">
            <div class="label">Total</div>
            <div class="amount">@total€</div>
        </div>
    </div>
    <SfGrid DataSource="@expensesViewModel.Expenses" AllowPaging="true" AllowSelection="true">
        <GridColumns>
            <GridColumn Field="@nameof(Expense.Transaction)" HeaderText="Transaction" Width="140"></GridColumn>
            <GridColumn Field="@nameof(Expense.Amount)" HeaderText="Amount" Width="150"></GridColumn>
            <GridColumn Field="@nameof(Expense.Date)" HeaderText="Date" Width="150"></GridColumn>
            <GridColumn Field="@nameof(Expense.Type)" HeaderText="Type" Width="50"></GridColumn>
            <GridColumn Width="50">
                <Template>
                    <img src="../images/delete.png" height="20px" @onclick="(() => DeleteExpense(context as Expense))" style="cursor: pointer;" />
                </Template>
            </GridColumn>
        </GridColumns>
    </SfGrid>
</div>

<div class="modal show" style="display:none;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add a transaction</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="HideModal"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col">
                        <div class="form-group">
                            <label for="expenseName">Transaction name:</label>
                            <input type="text" class="form-control" id="expenseName" @bind="expense.Transaction" required />
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-group">
                            <label for="expenseAmount">Amount:</label>
                            <input type="number" class="form-control" id="expenseAmount" @bind="expense.Amount" required />
                        </div>
                    </div>
                </div>
                <div class="form-group row-display">
                    <div>
                        <label>
                            <input type="radio" name="expenseType" value="Income" @onchange="HandleTypeChange" /> Income
                        </label>
                    </div>
                    <div>
                        <label>
                            <input type="radio" name="expenseType" value="Outcome" @onchange="HandleTypeChange" /> Outcome
                        </label>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="AddFinance">Submit</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int projectId { get; set; }

    private Expense expense = new Expense();
    private DataContext dbContext { get; set; } = new DataContext();
    private ExpensesViewModel expensesViewModel;
    Project project = new Project();
    private decimal income;
    private decimal outcome;
    private decimal total;
    private string selectedType;

    private void HandleTypeChange(ChangeEventArgs e)
    {
        selectedType = e.Value.ToString();
    }

    protected override void OnInitialized()
    {
        project = dbContext.Projects.FirstOrDefault(w => w.Id == projectId);
        expensesViewModel = new ExpensesViewModel(projectId);
        CalculateTotals();
    }

    private void GoBack()
    {
        Navigation.NavigateTo($"/projectMenu/{projectId}");
    }

    public async Task OpenModal()
    {
        await JS.InvokeVoidAsync("showModal");
    }

    private async Task AddFinance()
    {
        expense.Date = DateOnly.FromDateTime(DateTime.Today);
        expense.Type = selectedType == "Outcome" ? "-" : "+";
        expense.ProjectId = projectId;
        dbContext.Expenses.Add(expense);
        await dbContext.SaveChangesAsync();
        expensesViewModel.Expenses.Add(expense);
        CalculateTotals();
        NotificationsViewModel.CreateNotification(expense.Transaction, project.Name, NotificationType.ExpenseAdded, null);

        expense = new Expense();
        await HideModal();
    }

    public async Task HideModal()
    {
        await JS.InvokeVoidAsync("hideModal");
    }

    private void CalculateTotals()
    {
        income = expensesViewModel.GetIncome();
        outcome = expensesViewModel.GetOutcome();
        total = expensesViewModel.GetTotal();
    }

    private async Task DeleteExpense(Expense expenseToDelete)
    {
        dbContext.Expenses.Remove(expenseToDelete);
        await dbContext.SaveChangesAsync();
        expensesViewModel.Expenses.Remove(expenseToDelete);
        CalculateTotals();

        NotificationsViewModel.CreateNotification(expenseToDelete.Transaction, project.Name, NotificationType.ExpenseDeleted, null);
    }
}

<style>
    .container {
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .title {
        font-size: 60px;
        font-family: 'TitleFont';
    }

    .row {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        margin-top: 10px;
        flex-grow: 1;
    }

    .card {
        width: 300px;
        height: 200px;
        margin: 10px;
        padding: 20px;
        border-radius: 40px;
        background-color: #EFE9DC;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    .label {
        font-size: 40px;
        font-family: 'AppFont';
        text-align: center;
        margin-bottom: 20px;
    }

    .amount {
        font-size: 50px;
        font-family: 'AppFont';
        text-align: center;
    }

    .data-grid {
        width: 800px;
        margin-top: 30px;
        align-self: center;
    }

    .delete-button {
        align-self: flex-end;
        margin: 10px;
        width: 50px;
        height: 50px;
    }

    .row-display {
        display: flex;
        flex-direction: row;
        justify-content: space-around;
        margin-top: 20px;
    }

    @@media only screen and (max-width: 600px) {
        .card {
            width: calc(100% - 20px);
        }

        .label {
            font-size: 30px;
        }

        .amount {
            font-size: 40px;
        }
    }
</style>

<script>
    window.showModal = () => {
        const modal = document.querySelector('.modal');
        if (modal) {
            modal.style.display = 'block';
        }
    };

    window.hideModal = () => {
        const modal = document.querySelector('.modal');
        if (modal) {
            modal.style.display = 'none';
        }
    };
</script>