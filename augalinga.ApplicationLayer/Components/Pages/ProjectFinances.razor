@page "/projectFinances/{projectName}"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.Grids
@using augalinga.ApplicationLayer.Components.ViewModels
@using augalinga.Data.Entities
@inject IJSRuntime JS
@inject NavigationManager Navigation
@using augalinga.Data.Entities
@using augalinga.Data.Access

<div class="header">
    <div class="header">
        <div style="flex: 1">
            <button @onclick="GoBack" class="back-button">Back</button>
        </div>
        <h1>@projectName Finances</h1>
        <div style="flex: 1; display: flex; justify-content: flex-end;">
            <button class="button" @onclick="OpenModal" style="margin: 10px; width: 50px; height: 50px; border-radius: 25px;">+</button>
        </div>
    </div>
</div>

<div class="container">
    <div class="row">
        <div class="card">
            <div class="label">Income</div>
            <div class="amount">@income€</div>
        </div>
        <div class="card">
            <div class="label">Outcome</div>
            <div class="amount">@outcome€</div>
        </div>
        <div class="card">
            <div class="label">Total</div>
            <div class="amount">@total€</div>
        </div>
    </div>
    <SfGrid DataSource="@expensesViewModel.Expenses" AllowPaging="true" AllowSelection="true" OnRowSelected="OnRowSelected">
    </SfGrid>
    <button onclick="DeleteButton_Clicked()" class="delete-button">Delete</button>
</div>


<div class="modal show" style="display:none;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add a transaction</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col">
                        <div class="form-group">
                            <label for="expenseName">Expense Name</label>
                            <input type="text" class="form-control" id="expenseName" @bind="expense.Transaction" required/>
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-group">
                            <label for="expenseAmount">Amount</label>
                            <input type="number" class="form-control" id="expenseAmount" @bind="expense.Amount" required/>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                     <label>Type</label>
                     <div>
                         <label>
                             <input type="radio" name="expenseType" value="Income" @onchange="HandleTypeChange" /> Income
                         </label>
                     </div>
                     <div>
                         <label>
                             <input type="radio" name="expenseType" value="Outcome" @onchange="HandleTypeChange" /> Outcome
                         </label>
                     </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="AddFinance">Submit</button>
            </div>
        </div>
    </div>
</div>



@code {
    [Parameter]
    public string projectName { get; set; }
    Expense expense = new Expense();
    private DataContext dbContext { get; set; } = new DataContext();
    ExpensesViewModel expensesViewModel;
    private decimal income;
    private decimal outcome;
    private decimal total;



    private string selectedType;

    private void HandleTypeChange(ChangeEventArgs e)
    {
        selectedType = e.Value.ToString();
    }

    protected override void OnInitialized()
    {
        expensesViewModel = new ExpensesViewModel(projectName);
        income = expensesViewModel.GetIncome();
        outcome = expensesViewModel.GetOutcome();
        total = expensesViewModel.GetTotal();
    }

    private void GoBack()
    {
        Navigation.NavigateTo($"/projectMenu/{projectName}");
    }

    public async Task OpenModal()
    {
        await JS.InvokeVoidAsync("showModal");        
    }

    private async Task AddFinance()
    {
        expense.Project = projectName;
        expense.Date = DateOnly.FromDateTime(DateTime.Today);
        if(selectedType == "Outcome")
        {
            expense.Type = "-";
        }
        else
        {
            expense.Type = "+";
        }
        dbContext.Expenses.Add(expense);
        await dbContext.SaveChangesAsync();
        expensesViewModel.Expenses.Add(expense);
        expense = new Expense();
        await HideModal();
    }

    public async Task HideModal()
    {
        Console.WriteLine("HideModal method called.");
        await JS.InvokeVoidAsync("hideModal");
    }

}

<style>
    .back-button {
        background-color: #518478;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
        margin-bottom: 20px;
    }

    .back-button:hover {
        background-color: #405955;
    }

    .header {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: space-between;
        padding: 10px;
    }

    .container {
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .header {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 70px;
    }

    .title {
        font-size: 60px;
        font-family: 'TitleFont';
    }

    .row {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        margin-top: 10px;
        flex-grow: 1;
    }

    .card {
        width: 300px;
        height: 200px;
        margin: 10px;
        padding: 20px;
        border-radius: 40px;
        background-color: #EFE9DC;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

        .card:nth-child(odd) {
            background-color: #FFFFFF;
        }

    .label {
        font-size: 40px;
        font-family: 'AppFont';
        text-align: center;
        margin-bottom: 20px;
    }

    .amount {
        font-size: 50px;
        font-family: 'AppFont';
        text-align: center;
    }

    .data-grid {
        width: 800px;
        margin-top: 30px;
        align-self: center;
    }

    .delete-button {
        align-self: flex-end;
        margin: 10px;
        width: 50px;
        height: 50px;
    }

    @@media only screen and (max-width: 600px) {
    .card {
        width: calc(100% - 20px);
    }
}

    @@media only screen and (max-width: 600px) {
    .label {
        font-size: 30px;
    }

    .amount {
        font-size: 40px;
    }
}
</style>

    <script>
        ﻿window.showModal = () => {
    const modal = document.querySelector('.modal');
    console.log("SUP");
    if (modal) {
        modal.style.display = 'block';
    }
};

window.hideModal = () => {
    const modal = document.querySelector('.modal');
    if (modal) {
        modal.style.display = 'none';
    }
};
    </script>