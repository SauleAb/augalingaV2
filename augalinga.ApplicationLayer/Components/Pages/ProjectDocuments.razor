@page "/projectDocuments/{projectId:int}"
@using Azure
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Grids
@using augalinga.Backend.Models
@using augalinga.Backend.Services
@using augalinga.Backend.ViewModels
@using augalinga.Data.Access
@using augalinga.Data.Entities
@using Syncfusion.Blazor.Popups
@inject NavigationManager Navigation
@using Syncfusion.Blazor.Inputs
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Maui.Controls
@using System.Text.Json
@using Azure.Storage.Blobs;
@using Azure.Storage.Blobs.Models;
@using augalinga.Data.Enums
@inject IJSRuntime JS
@inject DataContext DataContext
@inject INotificationService NotificationService

<div class="header">
    <div style="flex: 1">
        <button @onclick="GoBack" class="back-button"><i class="bi bi-arrow-left h2"></i></button>
    </div>
    <h1>@project.Name Documents</h1>
    <div style="flex: 1; display: flex; justify-content: flex-end;">
        <button class="add-button" @onclick="OpenModal"><i class="bi bi-plus-lg h2"></i></button>
    </div>
</div>

<SfGrid DataSource="@documentsViewModel.Documents" AllowPaging="true" AllowSelection="true" @ref="documentsGrid" OnRowSelected="OnRowSelected">
    <GridColumns>
        <GridColumn Field=@nameof(Document.Name) HeaderText="Name"></GridColumn>
        <GridColumn Field=@nameof(Document.Link) HeaderText="Link"></GridColumn>
        <GridColumn Width="50">
            <Template>
                <img src="../images/download.svg" height="20px" @onclick="(() => DownloadDocument(context as Document))" style="cursor: pointer;" />
            </Template>
        </GridColumn>
        <GridColumn Width="50">
            <Template>
                <img src="../images/trash3.svg" height="20px" @onclick="(() => DeleteDocument(context as Document))" style="cursor: pointer;" />
            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>

<div class="modal show" style="display:none;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add documents</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="HideModal"></button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="fileInput">Select file:</label>
                    <InputFile id="fileInput" OnChange="HandleFileSelect" multiple />
                    <ul>
                        @if (selectedFiles.Any())
                        {
                            @foreach (var file in selectedFiles)
                            {
                                <li>@file.Name</li>
                            }
                        }
                    </ul>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="UploadFiles">Submit</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int projectId { get; set; }
    DocumentsViewModel documentsViewModel;
    SfDialog documentDialog;
    BlobContainerClient containerClient;
    private List<IBrowserFile> selectedFiles = new List<IBrowserFile>();
    private SfGrid<Document> documentsGrid;
    Project project = new Project();

    protected async override void OnInitialized()
    {
        documentsViewModel = new DocumentsViewModel(projectId, DataContext);
        project = await DataContext.Projects.FindAsync(projectId);

    }

    private async Task DownloadDocument(Document document)
    {
        await JS.InvokeVoidAsync("open", document.Link, "_blank");
    }

    public async Task HideModal()
    {
        await JS.InvokeVoidAsync("hideModal");
    }

    public async Task OpenModal()
    {
        await JS.InvokeVoidAsync("showModal");
    }

    private void GoBack()
    {
        Navigation.NavigateTo($"/projectMenu/{projectId}");
    }

    private void HandleFileSelect(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles().ToList();
    }

    private void ReloadPage()
    {
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }

    private async Task UploadFiles()
    {
        await documentsViewModel.UploadFilesAsync(selectedFiles, project, NotificationService);
        selectedFiles.Clear();
        await documentsGrid.Refresh();
        StateHasChanged();
        await HideModal();
    }

    private async Task DeleteDocument(Document document)
    {
        await documentsViewModel.DeleteDocument(document, project.Name);
        NotificationService.CreateNotification(document.Name, project.Name, NotificationType.DocumentDeleted, null);
    }
}

<script>
    window.showModal = () => {
        const modal = document.querySelector('.modal');
        if (modal) {
            modal.style.display = 'block';
        }
    };

    window.hideModal = () => {
        const modal = document.querySelector('.modal');
        if (modal) {
            modal.style.display = 'none';
        }
    };
</script>
