@page "/admin"
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Grids
@using augalinga.Backend.ViewModels
@using augalinga.Data.Entities
@inject NavigationManager Navigation
@using Syncfusion.Blazor.Inputs
@using Microsoft.Maui.Controls
@using System.Text.Json
@inject IJSRuntime JS
@using augalinga.Data.Access
@using Microsoft.EntityFrameworkCore; // Add this line

<div class="header">
    <div style="flex: 1">
        <button @onclick="GoBack" class="back-button"><i class="bi bi-arrow-left h2"></i></button>
    </div>
    <h1>Admin</h1>
    <div style="flex: 1; display: flex; justify-content: flex-end;">
        <button class="add-button" @onclick="OpenModal"><i class="bi bi-plus-lg h2"></i></button>
    </div>
</div>

<SfGrid DataSource="@usersViewModel.Users" AllowPaging="true">
    <GridColumns>
        <GridColumn Field=@nameof(User.Username) HeaderText="Name"></GridColumn>
        <GridColumn Field=@nameof(User.Email) HeaderText="Email"></GridColumn>
        <GridColumn Field=@nameof(User.Color) HeaderText="Color"></GridColumn>
        <GridColumn Width="50">
            <Template>
                <img src="../images/delete.png" height="20px" @onclick="(() => DeleteUser(context as User))" style="cursor: pointer;" />
            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>

<div class="modal show" style="display:none;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add a User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="HideModal"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col">
                        <div class="form-group">
                            <label for="Username">Name:</label>
                            <input type="text" class="form-control" id="Username" @bind="user.Username" required />
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-group">
                            <label for="userPassword">Password:</label>
                            <input type="password" class="form-control" id="userPassword" @bind="user.Password" required />
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <div class="form-group">
                            <label for="userEmail">Email:</label>
                            <input type="text" class="form-control" id="userEmail" @bind="user.Email" />
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-group">
                            <label for="userColor">Color:</label>
                            <InputText id="userColor" type="color" class="form-control" @bind-Value="user.Color" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="AddUser">Submit</button>
            </div>
        </div>
    </div>
</div>

@code {
    private DataContext dbContext { get; set; } = new DataContext();
    private User user = new User();
    private UsersViewModel usersViewModel;

    protected override void OnInitialized()
    {
        usersViewModel = new UsersViewModel();
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    private async Task DeleteUser(User user)
    {
        dbContext.Users.Remove(user);
        await dbContext.SaveChangesAsync();
        usersViewModel.Users.Remove(user);
    }

    private async Task AddUser()
    {
        var existingUser = await dbContext.Users
            .FirstOrDefaultAsync(u => u.Email == user.Email); // Ensure this is using Microsoft.EntityFrameworkCore

        if (existingUser != null)
        {
            await JS.InvokeVoidAsync("alert", "Email is already in use.");
            return;
        }

        user.Password = HashPassword(user.Password); // Hash the password
        dbContext.Users.Add(user);
        await dbContext.SaveChangesAsync();
        usersViewModel.Users.Add(user);
        await HideModal();
    }

    private string HashPassword(string password)
    {
        return BCrypt.Net.BCrypt.HashPassword(password);
    }

    public async Task OpenModal()
    {
        await JS.InvokeVoidAsync("showModal");
    }

    public async Task HideModal()
    {
        await JS.InvokeVoidAsync("hideModal");
    }
}

<script>
    window.showModal = () => {
        const modal = document.querySelector('.modal');
        if (modal) {
            modal.style.display = 'block';
        }
    };

    window.hideModal = () => {
        const modal = document.querySelector('.modal');
        if (modal) {
            modal.style.display = 'none';
        }
    };
</script>

<style>
</style>
