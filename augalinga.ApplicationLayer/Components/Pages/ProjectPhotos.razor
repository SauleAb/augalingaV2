@page "/projectPhotos/{projectId}"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.Grids
@using augalinga.ApplicationLayer.Components.ViewModels
@using augalinga.Data.Access
@using augalinga.Data.Entities
@using augalinga.ApplicationLayer.Components.Models
@inject NavigationManager Navigation
@using Amazon.S3
@using Amazon.S3.Model
@using Amazon
@inject IJSRuntime JS
@using Syncfusion.Blazor.Navigations

<div class="header">
    <div style="flex: 1">
        <button @onclick="GoBack" class="back-button"><i class="bi bi-arrow-left h2"></i></button>
    </div>
    <h1>@project.Name Photos</h1>
    <div style="flex: 1; display: flex; justify-content: flex-end;">
        <button class="add-button" @onclick="OpenModal"><i class="bi bi-plus-lg h2"></i></button>
    </div>
</div>

<nav>
    <div class="nav nav-tabs" id="nav-tab" role="tablist">
        <button class="nav-link @(isBeforeTabActive ? "active" : "")" id="nav-before-tab" data-bs-toggle="tab" data-bs-target="#nav-before" type="button" role="tab" aria-controls="nav-before" aria-selected="@(isBeforeTabActive)" @onclick="ActivateBeforeTab">Before</button>
        <button class="nav-link @(isAfterTabActive ? "active" : "")" id="nav-after-tab" data-bs-toggle="tab" data-bs-target="#nav-after" type="button" role="tab" aria-controls="nav-after" aria-selected="@(isAfterTabActive)" @onclick="ActivateAfterTab">After</button>
        <button class="nav-link @(isGeneralTabActive ? "active" : "")" id="nav-general-tab" data-bs-toggle="tab" data-bs-target="#nav-general" type="button" role="tab" aria-controls="nav-general" aria-selected="@(isGeneralTabActive)" @onclick="ActivateGeneralTab">General</button>
    </div>
</nav>
<div class="tab-content" id="nav-tabContent">
    <div class="tab-pane fade @(isBeforeTabActive ? "show active" : "")" id="nav-before" role="tabpanel" aria-labelledby="nav-before-tab">
        @if (beforePhotos != null)
        {
            foreach (var url in beforePhotos)
            {
                <img src="@url" width="300" height="200" style="margin: 5px;" @onclick="() => OnPhotoClicked(url)" />
            }
        }
    </div>
    <div class="tab-pane fade @(isAfterTabActive ? "show active" : "")" id="nav-after" role="tabpanel" aria-labelledby="nav-after-tab">
        @if (afterPhotos != null)
        {
            foreach (var url in afterPhotos)
            {
                <img src="@url" width="300" height="200" style="margin: 5px;" @onclick="() => OnPhotoClicked(url)" />
            }
        }
    </div>
    <div class="tab-pane fade @(isGeneralTabActive ? "show active" : "")" id="nav-general" role="tabpanel" aria-labelledby="nav-general-tab">
        @if (generalPhotos != null)
        {
            foreach (var url in generalPhotos)
            {
                <img src="@url" width="300" height="200" style="margin: 5px;" @onclick="() => OnPhotoClicked(url)" />
            }
        }
    </div>
</div>

<div class="modal" style="display:@(isModalVisible ? "block" : "none"); background-color: rgba(0, 0, 0, 0.5);">
    <div class="modal-dialog modal-dialog-centered" style="min-width: 70vw; min-height:60vh;">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseBiggerView"></button>
            </div>
            <div class="control-container">
                <SfCarousel @bind-SelectedIndex="@selectedPhotoIndex">
                    @if (isBeforeTabActive)
                    {
                        foreach (var url in beforePhotos)
                        {
                            <CarouselItem>
                                <figure class="img-container">
                                    <img src="@url" alt="Before Photo" style="height:100%;width:100%;" />
                                </figure>
                            </CarouselItem>
                        }
                    }
                    @if (isAfterTabActive)
                    {
                        foreach (var url in afterPhotos)
                        {
                            <CarouselItem>
                                <figure class="img-container">
                                    <img src="@url" alt="After Photo" style="height:100%;width:100%;" />
                                </figure>
                            </CarouselItem>
                        }
                    }
                    @if (isGeneralTabActive)
                    {
                        foreach (var url in generalPhotos)
                        {
                            <CarouselItem>
                                <figure class="img-container">
                                    <img src="@url" alt="General Photo" style="height:100%;width:100%;" />
                                </figure>
                            </CarouselItem>
                        }
                    }
                </SfCarousel>
            </div>
            <div class="modal-footer">
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int projectId { get; set; }
    PhotosViewModel photosViewModel;
    private List<string> beforePhotos = new List<string>();
    private List<string> afterPhotos = new List<string>();
    private List<string> generalPhotos = new List<string>();
    private List<IBrowserFile> selectedFiles = new List<IBrowserFile>();
    string bucket = "augalinga-app";
    string folder = "photos";
    string category = "before";
    IAmazonS3 s3Client = new AmazonS3Client(RegionEndpoint.EUNorth1);
    public DataContext dbContext { get; set; } = new DataContext();
    private string errorMessage;
    private bool isBeforeTabActive = true;
    private bool isAfterTabActive = false;
    private bool isGeneralTabActive = false;
    private bool isModalVisible = false;
    private int selectedPhotoIndex = 0;
    Project project = new Project();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            project = await dbContext.Projects.FindAsync(projectId);
            photosViewModel = new PhotosViewModel(projectId);
            await LoadPhotos();
        }
        catch (Exception ex)
        {
            HandleException(ex, "An error occurred while initializing");
        }
    }

    private void ActivateBeforeTab()
    {
        isBeforeTabActive = true;
        isAfterTabActive = false;
        isGeneralTabActive = false;
        selectedPhotoIndex = 0; // Reset index on tab change
    }

    private void ActivateAfterTab()
    {
        isBeforeTabActive = false;
        isAfterTabActive = true;
        isGeneralTabActive = false;
        selectedPhotoIndex = 0; // Reset index on tab change
    }

    private void ActivateGeneralTab()
    {
        isBeforeTabActive = false;
        isAfterTabActive = false;
        isGeneralTabActive = true;
        selectedPhotoIndex = 0; // Reset index on tab change
    }

    private async Task LoadPhotos()
    {
        try
        {
            beforePhotos = await augalinga.ApplicationLayer.Components.Models.S3Bucket.ListPhotosAsync(s3Client, bucket, project.Name, "before");
            afterPhotos = await augalinga.ApplicationLayer.Components.Models.S3Bucket.ListPhotosAsync(s3Client, bucket, project.Name, "after");
            generalPhotos = await augalinga.ApplicationLayer.Components.Models.S3Bucket.ListPhotosAsync(s3Client, bucket, project.Name, "general");
        }
        catch (Exception ex)
        {
            HandleException(ex, "An error occurred while loading photos");
        }
    }

    public async Task HideModal()
    {
        try
        {
            await JS.InvokeVoidAsync("hideModal");
        }
        catch (Exception ex)
        {
            HandleException(ex, "An error occurred while hiding the modal");
        }
    }

    public async Task OpenModal()
    {
        try
        {
            await JS.InvokeVoidAsync("showModal");
        }
        catch (Exception ex)
        {
            HandleException(ex, "An error occurred while opening the modal");
        }
    }

    private void GoBack()
    {
        try
        {
            Navigation.NavigateTo($"/projectMenu/{projectId}");
        }
        catch (Exception ex)
        {
            HandleException(ex, "An error occurred while navigating");
        }
    }

    private void HandleCategorySelect(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        category = e.Value.ToString();
    }

    private void HandleFileSelect(InputFileChangeEventArgs e)
    {
        try
        {
            selectedFiles = e.GetMultipleFiles().ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while selecting files: {ex.Message}";
            Console.WriteLine($"File Selection Error: {ex}");
        }
    }

    private async Task UploadFiles()
    {
        errorMessage = string.Empty;
        try
        {
            foreach (var file in selectedFiles)
            {
                string objectKey = $"{projectId}/{folder}/{category}/{file.Name}";

                const long maxFileSize = 2L * 1024 * 1024 * 1024; // 2GB
                using var stream = file.OpenReadStream(maxFileSize);
                var request = new PutObjectRequest
                    {
                        BucketName = bucket,
                        Key = objectKey,
                        InputStream = stream
                    };
                await s3Client.PutObjectAsync(request);
            }
            selectedFiles.Clear();
            ReloadPage();
            await HideModal();
        }
        catch (AmazonS3Exception s3Ex)
        {
            HandleException(s3Ex, "S3 Error");
        }
        catch (Exception ex)
        {
            HandleException(ex, "An error occurred");
        }
    }

    private void HandleException(Exception ex, string errorMessagePrefix)
    {
        errorMessage = $"{errorMessagePrefix}: {ex.Message}";
        Console.WriteLine($"{errorMessagePrefix}: {ex}");
    }

    private void ReloadPage()
    {
        var uri = Navigation.ToAbsoluteUri($"/projectPhotos/{projectId}");
        Navigation.NavigateTo(uri.ToString(), true);
    }

    private void OnPhotoClicked(string url)
    {
        if (isBeforeTabActive)
        {
            selectedPhotoIndex = beforePhotos.IndexOf(url);
        }
        else if (isAfterTabActive)
        {
            selectedPhotoIndex = afterPhotos.IndexOf(url);
        }
        else if (isGeneralTabActive)
        {
            selectedPhotoIndex = generalPhotos.IndexOf(url);
        }
        OpenBiggerView(selectedPhotoIndex);
    }

    private void CloseBiggerView()
    {
        selectedPhotoIndex = -1;
        isModalVisible = false;
    }

    private void OpenBiggerView(int photoIndex)
    {
        isModalVisible = true;
        selectedPhotoIndex = photoIndex;
    }

    private void NextPhoto()
    {
        if (selectedPhotoIndex < (beforePhotos?.Count ?? 0) - 1)
        {
            selectedPhotoIndex++;
        }
        else
        {
            selectedPhotoIndex = 0;
        }
    }

    private void PreviousPhoto()
    {
        if (selectedPhotoIndex > 0)
        {
            selectedPhotoIndex--;
        }
        else
        {
            selectedPhotoIndex = beforePhotos.Count - 1;
        }
    }
}

<style>
    .header {
        display: flex;
        align-items: center;
        margin-bottom: 1rem;
    }

    .back-button, .add-button {
        border: none;
        background: none;
    }

    .control-container {
        background-color: transparent;
        height: 500px;
        margin: 0 auto;
        width: 800px;
        border: none;
    }

    .tab-content img {
        cursor: pointer;
    }

    .e-carousel .e-carousel-items .e-carousel-item .img-container {
        height: 100%;
    }

    .e-carousel .e-carousel-items .e-carousel-item .img-caption {
        bottom: 4em;
        color: #fff;
        font-size: 12pt;
        height: 2em;
        position: relative;
        text-align: center;
        width: 100%;
    }

    .modal-content {
        background-color: transparent;
        border:none;
        color: white;
    }

    .modal-header {
        border:none;
    }

    .modal-footer {
        border:none;
    }

        .modal-header .btn-close {
            filter: invert(100%); 
        }
</style>

<script>
    window.showModal = () => {
        const modal = document.querySelector('.modal');
        if (modal) {
            modal.style.display = 'block';
        }
    };

    window.hideModal = () => {
        const modal = document.querySelector('.modal');
        if (modal) {
            modal.style.display = 'none';
        }
    };
</script>
